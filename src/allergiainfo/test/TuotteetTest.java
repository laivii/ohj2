package allergiainfo.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import allergiainfo.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2025.03.08 12:59:18 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class TuotteetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa36 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa36() throws SailoException {    // Tuotteet: 36
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t = new Tuote(); 
    Tuote t2 = new Tuote(); 
    assertEquals("From: Tuotteet line: 44", 0, tuotteet.haeLkm()); 
    tuotteet.lisaa(t); assertEquals("From: Tuotteet line: 46", 1, tuotteet.haeLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 47", 2, tuotteet.haeLkm()); 
    tuotteet.lisaa(t); assertEquals("From: Tuotteet line: 48", 3, tuotteet.haeLkm()); 
    assertEquals("From: Tuotteet line: 50", t, tuotteet.anna(0)); 
    assertEquals("From: Tuotteet line: 51", t2, tuotteet.anna(1)); 
    assertEquals("From: Tuotteet line: 52", t, tuotteet.anna(2)); 
    assertEquals("From: Tuotteet line: 53", false, tuotteet.anna(1) == t); 
    assertEquals("From: Tuotteet line: 54", true, tuotteet.anna(1) == t2); 
    try {
    assertEquals("From: Tuotteet line: 55", t, tuotteet.anna(3)); 
    fail("Tuotteet: 55 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    tuotteet.lisaa(t); assertEquals("From: Tuotteet line: 57", 4, tuotteet.haeLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 58", 5, tuotteet.haeLkm()); 
    try {
    tuotteet.lisaa(t); 
    fail("Tuotteet: 59 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaViimeinen72 
   * @throws SailoException when error
   */
  @Test
  public void testPoistaViimeinen72() throws SailoException {    // Tuotteet: 72
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t1 = new Tuote(); 
    Tuote t2 = new Tuote(); 
    Tuote t3 = new Tuote(); 
    t1.rekisteroi(); assertEquals("From: Tuotteet line: 79", 1, t1.haeId()); 
    t2.rekisteroi(); assertEquals("From: Tuotteet line: 80", 2, t2.haeId()); 
    t3.rekisteroi(); assertEquals("From: Tuotteet line: 81", 3, t3.haeId()); 
    tuotteet.lisaa(t1); assertEquals("From: Tuotteet line: 83", 1, tuotteet.haeLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 84", 2, tuotteet.haeLkm()); 
    tuotteet.lisaa(t3); assertEquals("From: Tuotteet line: 85", 3, tuotteet.haeLkm()); 
    tuotteet.poistaViimeinen(); assertEquals("From: Tuotteet line: 87", 2, tuotteet.haeLkm()); 
    tuotteet.poistaViimeinen(); assertEquals("From: Tuotteet line: 88", 1, tuotteet.haeLkm()); 
    tuotteet.poistaViimeinen(); assertEquals("From: Tuotteet line: 89", 0, tuotteet.haeLkm()); 
    tuotteet.poistaViimeinen(); assertEquals("From: Tuotteet line: 90", 0, tuotteet.haeLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaTietty111 
   * @throws SailoException when error
   */
  @Test
  public void testPoistaTietty111() throws SailoException {    // Tuotteet: 111
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t1 = new Tuote(); 
    Tuote t2 = new Tuote(); 
    Tuote t3 = new Tuote(); 
    t1.rekisteroi(); assertEquals("From: Tuotteet line: 118", 7, t1.haeId()); 
    t2.rekisteroi(); assertEquals("From: Tuotteet line: 119", 8, t2.haeId()); 
    t3.rekisteroi(); assertEquals("From: Tuotteet line: 120", 9, t3.haeId()); 
    tuotteet.lisaa(t1); assertEquals("From: Tuotteet line: 122", 1, tuotteet.haeLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 123", 2, tuotteet.haeLkm()); 
    tuotteet.lisaa(t3); assertEquals("From: Tuotteet line: 124", 3, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(7); assertEquals("From: Tuotteet line: 126", 2, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(99); assertEquals("From: Tuotteet line: 127", 2, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(8); assertEquals("From: Tuotteet line: 128", 1, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(9); assertEquals("From: Tuotteet line: 129", 0, tuotteet.haeLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testHaeTuoteIdlla165 
   * @throws SailoException when error
   */
  @Test
  public void testHaeTuoteIdlla165() throws SailoException {    // Tuotteet: 165
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t1 = new Tuote(); 
    Tuote t2 = new Tuote(); 
    Tuote t3 = new Tuote(); 
    t1.rekisteroi(); assertEquals("From: Tuotteet line: 173", 4, t1.haeId()); 
    t2.rekisteroi(); assertEquals("From: Tuotteet line: 174", 5, t2.haeId()); 
    t3.rekisteroi(); assertEquals("From: Tuotteet line: 175", 6, t3.haeId()); 
    tuotteet.lisaa(t1); 
    tuotteet.lisaa(t2); 
    tuotteet.lisaa(t3); 
    assertEquals("From: Tuotteet line: 181", t1, tuotteet.haeTuoteIdlla(4)); 
    assertEquals("From: Tuotteet line: 182", t3, tuotteet.haeTuoteIdlla(6)); 
    assertEquals("From: Tuotteet line: 183", t2, tuotteet.haeTuoteIdlla(5)); 
    try {
    tuotteet.haeTuoteIdlla(55); 
    fail("Tuotteet: 184 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}