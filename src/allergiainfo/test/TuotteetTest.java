package allergiainfo.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import allergiainfo.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2025.04.23 09:01:00 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class TuotteetTest {



  // Generated by ComTest BEGIN
  /** testLisaa39 */
  @Test
  public void testLisaa39() {    // Tuotteet: 39
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t = new Tuote(); 
    Tuote t2 = new Tuote(); 
    assertEquals("From: Tuotteet line: 45", 0, tuotteet.haeLkm()); 
    tuotteet.lisaa(t); assertEquals("From: Tuotteet line: 47", 1, tuotteet.haeLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 48", 2, tuotteet.haeLkm()); 
    tuotteet.lisaa(t); assertEquals("From: Tuotteet line: 49", 3, tuotteet.haeLkm()); 
    assertEquals("From: Tuotteet line: 51", t, tuotteet.anna(0)); 
    assertEquals("From: Tuotteet line: 52", t2, tuotteet.anna(1)); 
    assertEquals("From: Tuotteet line: 53", t, tuotteet.anna(2)); 
    assertEquals("From: Tuotteet line: 54", false, tuotteet.anna(1) == t); 
    assertEquals("From: Tuotteet line: 55", true, tuotteet.anna(1) == t2); 
    try {
    assertEquals("From: Tuotteet line: 56", t, tuotteet.anna(3)); 
    fail("Tuotteet: 56 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    tuotteet.lisaa(t); assertEquals("From: Tuotteet line: 58", 4, tuotteet.haeLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 59", 5, tuotteet.haeLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaTietty82 
   * @throws SailoException when error
   */
  @Test
  public void testPoistaTietty82() throws SailoException {    // Tuotteet: 82
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t1 = new Tuote(); 
    Tuote t2 = new Tuote(); 
    Tuote t3 = new Tuote(); 
    t1.rekisteroi(); assertEquals("From: Tuotteet line: 89", 4, t1.haeId()); 
    t2.rekisteroi(); assertEquals("From: Tuotteet line: 90", 5, t2.haeId()); 
    t3.rekisteroi(); assertEquals("From: Tuotteet line: 91", 6, t3.haeId()); 
    tuotteet.lisaa(t1); assertEquals("From: Tuotteet line: 93", 1, tuotteet.haeLkm()); 
    tuotteet.lisaa(t2); assertEquals("From: Tuotteet line: 94", 2, tuotteet.haeLkm()); 
    tuotteet.lisaa(t3); assertEquals("From: Tuotteet line: 95", 3, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(4); assertEquals("From: Tuotteet line: 97", 2, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(99); assertEquals("From: Tuotteet line: 98", 2, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(5); assertEquals("From: Tuotteet line: 99", 1, tuotteet.haeLkm()); 
    tuotteet.poistaTietty(6); assertEquals("From: Tuotteet line: 100", 0, tuotteet.haeLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testHaeTuoteIdlla142 
   * @throws SailoException when error
   */
  @Test
  public void testHaeTuoteIdlla142() throws SailoException {    // Tuotteet: 142
    Tuotteet tuotteet = new Tuotteet(); 
    Tuote t1 = new Tuote(); 
    Tuote t2 = new Tuote(); 
    Tuote t3 = new Tuote(); 
    t1.rekisteroi(); assertEquals("From: Tuotteet line: 150", 1, t1.haeId()); 
    t2.rekisteroi(); assertEquals("From: Tuotteet line: 151", 2, t2.haeId()); 
    t3.rekisteroi(); assertEquals("From: Tuotteet line: 152", 3, t3.haeId()); 
    tuotteet.lisaa(t1); 
    tuotteet.lisaa(t2); 
    tuotteet.lisaa(t3); 
    assertEquals("From: Tuotteet line: 158", t1, tuotteet.haeTuoteIdlla(1)); 
    assertEquals("From: Tuotteet line: 159", t3, tuotteet.haeTuoteIdlla(3)); 
    assertEquals("From: Tuotteet line: 160", t2, tuotteet.haeTuoteIdlla(2)); 
    try {
    tuotteet.haeTuoteIdlla(55); 
    fail("Tuotteet: 161 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}